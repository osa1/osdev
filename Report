# Report for Assignment 6

Commits and diffs: https://github.iu.edu/oagacan/exinu/compare/d191df5...21e07467722a3bc7ea3869bfc578d60298879819

I don't have a team member.

Here's the list of commands I implemented:

(first run `initfs` to initialize data structures, if you run fstest program,
that runs initialization so you don't need to initfs again)

ls, mkdir, touch, write, cat, mv, rm

I did a demo at discussion session, but here's also a demo that you can try by
yourself:

    xsh$ fstest
    filesystem initialized: 0
    Writing initial blocks to the drive.
    fsystem:        2 blocks
    freemask:       1 blocks
    inode bitfield: 1 blocks
    inodes_start:   4
    blocks_start:   12
    total blocks:   512
    filesystem initialized after mkfs: 1
    get_block_size() -> 512
    get_directory_blocks() -> 2
    = Directory (0 entries) ===================
    ============================================
    1111000000000000000000000000000100000000000000000000000000000000
    0000000000000000000000000010000100001000000000000000000000000000
    0000000000000000000000000010000100001000000000000000000000000000
    0000000000000000000000000010000100001000000000000000000000000000
    0000000000000000000000000010000100001000000000000000000000000000
    0000000000000000000000000011111111111000000000000000000000000000
    0000000000000000000000000000000100000000000000000000000000000000
    0000000000000000000000000000000100000000000000000000000000000000

    1111000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000

    allocated new block: 12
    allocated new block: 13
    allocated new block: 14
    Content of file <long input omitted>

I added more stuff to test program, it creates some nested files etc.

Listing files: (ls command)

    xsh$ ls
    = Directory (8 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    ============================================
    xsh$ ls d1
    = Directory (3 entries) ===================
    d11.file        (inode: 12, size: 0)    (file)
    d11     (inode: 13, size: 0)     (directory)
    d12     (inode: 14, size: 0)     (directory)
    ============================================

Creating new directory: (mkdir command)

    xsh$ mkdir new_dir
    xsh$ ls
    = Directory (9 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    new_dir (inode: 17, size: 0)     (directory)
    ============================================

Writing things to a file and reading it. (note how ls output is also updated
for size) (touch, write and cat commands)

    xsh$ touch new_dir/my_file.txt
    xsh$ write "blah blah blah" new_dir/my_file.txt
    allocated new block: 39
    xsh$ cat new_dir/my_file.txt
    blah blah blahxsh$
    xsh$ ls new_dir
    = Directory (1 entries) ===================
    my_file.txt     (inode: 18, size: 15)   (file)
    ============================================
    xsh$ ls
    = Directory (9 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    new_dir (inode: 17, size: 15)    (directory)
    ============================================

Removing files and directories, recursively or not: (rm and rm -rf commands)

    xsh$ ls d1
    = Directory (3 entries) ===================
    d11.file        (inode: 12, size: 0)    (file)
    d11     (inode: 13, size: 0)     (directory)
    d12     (inode: 14, size: 0)     (directory)
    ============================================
    xsh$ rm d1/d11.file
    xsh$ ls d1
    = Directory (2 entries) ===================
    d11     (inode: 13, size: 0)     (directory)
    d12     (inode: 14, size: 0)     (directory)
    ============================================
    xsh$ ls
    = Directory (9 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    new_dir (inode: 17, size: 15)    (directory)
    ============================================
    xsh$ rm -rf new_dir
    xsh$ ls
    = Directory (8 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    ============================================

Moving files and directories around: (mv command)

    xsh$ ls
    = Directory (8 entries) ===================
    Test_File       (inode: 4, size: 1200)  (file)
    d1      (inode: 5, size: 0)      (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    ============================================
    xsh$ mv Test_File d1/Renamed_Too.txt
    xsh$ ls
    = Directory (7 entries) ===================
    d1      (inode: 5, size: 1200)   (directory)
    d2      (inode: 6, size: 0)      (directory)
    d3      (inode: 7, size: 0)      (directory)
    d4      (inode: 8, size: 0)      (directory)
    d5      (inode: 9, size: 0)      (directory)
    d6      (inode: 10, size: 0)     (directory)
    d7      (inode: 11, size: 0)     (directory)
    ============================================
    xsh$ ls d1
    = Directory (3 entries) ===================
    d11     (inode: 13, size: 0)     (directory)
    d12     (inode: 14, size: 0)     (directory)
    Renamed_Too.txt (inode: 4, size: 1200)  (file)
    ============================================
    xsh$ cat d1/Renamed_Too.txt
    <prints contents, omitted here because it's long (see size of the file above)>

I tried to code as clear as possible, I believe reading the implementation
should be very easy. I also commented some important parts. Functions either
have descriptive names or comments. Implementation is simple, superblock keeps
track of root directory, a bitfield for inodes, a bitfield for data blocks. I
do extensive error checking to make using, reading and debugging as easy as
possible. Using the file system is completely safe, edge cases like writing or
seeking after maximum file size etc. are all handled.

Please email me if you don't understand some parts, instead of just dropping my
points :) Hopefully this won't be necessary because implementation is clear
enough.

# Report for Assignment 5

I don't have any group members.

I made multiple commits for this assignment, you can see all of them combined here:

https://github.iu.edu/oagacan/exinu/compare/eceedfe...b6b3f88

I also changed tests a bit to make observing FIFO property easier. (it's very tricky to get right)

Here's an example output:

  testing FUTURE_EXCLUSIVE
  consumer 4 trying to get the future.
  setting the future: 134651692
  set!
  consumer 4 consumed 134651692

  testing FUTURE_SHARED
  consumer 6 trying to get the future.
  consumer 7 trying to get the future.
  consumer 8 trying to get the future.
  consumer 9 trying to get the future.
  setting the future: 134651692
  set!
  consumer 6 consumed 134651692
  consumer 7 consumed 134651692
  consumer 8 consumed 134651692
  consumer 9 consumed 134651692

  testing FUTURE_QUEUE
  consumer 11 trying to get the future.
  consumer 12 trying to get the future.
  consumer 13 trying to get the future.
  consumer 14 trying to get the future.
  setting the future: 134651692
  consumer 11 consumed 134651692
  set!
  setting the future: 134651692
  consumer 12 consumed 134651692
  set!
  setting the future: 134651692
  consumer 13 consumed 134651692
  set!
  setting the future: 134651692
  consumer 14 consumed 134651692
  set!

  testing FUTURE_QUEUE (in different order)
  setting the future: 134651692
  set!
  consumer 20 trying to get the future.
  consumer 20 consumed 134651692
  setting the future: 134651692
  set!
  consumer 22 trying to get the future.
  consumer 22 consumed 134651692
  consumer 23 trying to get the future.
  setting the future: 134651692
  consumer 23 consumed 134651692
  set!
  setting the future: 134651692
  set!
  consumer 26 trying to get the future.
  consumer 26 consumed 134651692

  testing FUTURE_QUEUE (in different order)
  consumer 27 trying to get the future.
  setting the future: 134651692
  consumer 27 consumed 134651692
  set!
  consumer 29 trying to get the future.
  setting the future: 134651692
  setting the future: 134651692
  consumer 29 consumed 134651692
  set!
  consumer 32 trying to get the future.
  consumer 33 trying to get the future.
  consumer 32 consumed 134651692
  set!
  setting the future: 134651692
  consumer 33 consumed 134651692
  set!
  xsh$ QEMU: Terminated

It's easy to observe that consumers have FIFO property in all cases.

# Report for Assignment 4

No group members - I'm going solo.

I had to add some semaphores to futures to 1) make them thread-safe 2) allow readers to block while future is waiting to be filled.

# Report for Assignment 3

## Question 1

Synchronization is achieved using two semaphores: "produced" and "consumed".
"produced" is only signalled after a new value is produced. Before a new value is produced, producer waits for "consumed".
"consumed" is just the opposite. It's signalled after a value is consumed. Consumer waits for "produced" before consumes.

The control flow goes like this:

1. At first consumed = 0 and produced = 1.
2. Producer can't produce, because it waits for "consumed".
3. Consumer takes the "produced" semaphore, consumes the value, and signals "consumed".
4. Consumer is now blocked waiting for "produced", because it's just zeroed.
5. But producer can make progress, "consumed" is just signalled. It does the opposite, takes "consumed", produces a value, and signals "produced".
6. Producer is now blocked waiting for "consumed", just like what happened previously to consumer.
7. Now it's consumer's turn again. GOTO 3.

... and it goes like this. In the end, every produced value is consumed because there's no way for producer to produce twice without consumer consumes the produced value.

## Question 2

With only one semaphore all we can do is this:

producer:
  wait(sem);
  produce();
  signal(sem);

consumer:
  wait(sem);
  consume();
  signal(sem);

This makes sure that consuming and producing is not interleaved, but a value can still be consumed multiple times and some values may not be consumed at all. So with one semaphore we can't guarantee that every value is consumed.

## Code

See the git diff.


# Report for Assignment 2

## Question 1

Program consistently produced garbage. The reason is that both producer and
server are printing the produced/consumed values, and since printing is not an
atomic operation and since context switching can interrupt both sides in the
middle of printing process to switch to other process, output gets messed up.

## Question 2

Not all produced values are consumed. The reason is that context switching is
not happening deterministically, sometimes producer produces but before context
switching happens to let consumer consume the value, producer produces one more
value. So consumer sometimes missing some values.

## Functions


```c
shellcmd xsh_prodcons(int nargs, char *args[])
{
  n = 0;
  int count = 2000;

  if (nargs > 2) {
      printf(
          "ERROR: Wrong number of arguments given. Expected 1 or 0, found %d.\n"
          "USAGE: prodcons COUNT\n", nargs);
      return 1;
  }

  if (nargs == 2) {
    count = atoi(args[1]);
  }

  tid_typ producer_th = create(producer, 1024, 20, "producer", 3, count);
  tid_typ consumer_th = create(consumer, 1024, 20, "consumer", 3, count);

  resume(consumer_th);
  resume(producer_th);

  return 0;
}
```

```
void producer(int count)
{
  while (n <= count) {
    printf("producing %d\n", ++n);
  }
}
```

```
void consumer(int count)
{
  while (n <= count) {
    printf("consuming %d\n", n);
  }
}
```

(see also the diff file submitted to Canvas)
